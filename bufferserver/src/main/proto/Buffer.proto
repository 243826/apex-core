/*
 *  Copyright (c) 2012 Malhar, Inc.
 *  All Rights Reserved.
 */
package com.malhartech.bufferserver;

option optimize_for = SPEED;

message Payload {
  required bytes data = 1;
  optional uint32 partition = 2 [default = 0];
}

message ResetWindow {
  required uint32 base_seconds = 1;
  required uint32 width = 2;
}

message BeginWindow {
  required uint32 window_id = 1;
}

message EndWindow {
  required uint32 window_id = 1;
}

message EndStream {
  required uint32 window_id = 1;
}

message Request {
  extensions 101 to max;

  enum RequestType {
     Publisher = 1;
     Subscriber = 2;
     Reset = 3;
     Purge = 4;
  }

  optional string version = 1 [default = "1.0"];
  required string identifier = 2;
  optional uint32 base_seconds = 3 [default = 0];
  optional uint32 window_id = 4 [default = 0];
}


message PublisherRequest {
  extend Request {
    required PublisherRequest request = 101;
  }
}

message SubscriberRequest {
  extend Request {
    required SubscriberRequest request = 102;
  }
  required string type = 2;
  optional string upstream_identifier = 5;

  message Partitions {
     required uint32 mask = 1;
     repeated uint32 partition = 2;
  }
  optional Partitions partitions = 6;

  enum PolicyType {
      CUSTOM = 0;
      ROUND_ROBIN = 1;
      RANDOM_ONE = 2;
      LEAST_BUSY = 3;
      GIVE_ALL = 4;
  }
  optional PolicyType policy = 7 [default = GIVE_ALL ];
}

message PurgeRequest {
  extend Request {
    required PurgeRequest request = 103;
  }
}

message ResetRequest {
  extend Request {
    required ResetRequest request = 104;
  }
}

message CheckPoint {
}

message CodecState {
  required bytes data = 1;
}

message Message {
  optional Payload payload = 1;
  optional ResetWindow reset_window = 2;
  optional BeginWindow begin_window = 3;
  optional EndWindow end_window = 4;
  optional EndStream end_stream = 5;
  optional Request request = 6;
  optional CheckPoint check_point = 7;
  optional CodecState codec_state = 8;

  enum MessageType {
    NO_MESSAGE = 0;
    PAYLOAD = 1;
    RESET_WINDOW = 2;
    BEGIN_WINDOW = 3;
    END_WINDOW = 4;
    END_STREAM = 5;
    PUBLISHER_REQUEST = 6;
    SUBSCRIBER_REQUEST = 7;
    PURGE_REQUEST = 8;
    RESET_REQUEST = 9;
    CHECKPOINT = 10;
    CODEC_STATE = 11;
  }
  required MessageType type = 12;
}