/*
 *  Copyright (c) 2012-2013 DataTorrent, Inc.
 *  All Rights Reserved.
 */
package com.datatorrent.stram;

import java.io.*;
import java.util.*;

import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.apache.hadoop.classification.InterfaceAudience;
import org.apache.hadoop.classification.InterfaceStability;
import org.apache.hadoop.ipc.VersionedProtocol;

import com.datatorrent.api.AttributeMap;

import com.datatorrent.stram.api.BaseContext;
import com.datatorrent.stram.api.ContainerContext;
import com.datatorrent.stram.api.NodeRequest;
import com.datatorrent.stram.engine.OperatorStats;
import com.datatorrent.stram.util.AbstractWritableAdapter;

/**
 * Protocol that streaming node child process uses to contact its parent
 * (application master) process
 * <p>
 * <br>
 * All communication between child and parent is via this protocol.
 *
 * <br>
 *
 * @since 0.3.2
 */
// @TokenInfo(JobTokenSelector.class)
@InterfaceAudience.Private
@InterfaceStability.Stable
public interface StreamingContainerUmbilicalProtocol extends VersionedProtocol {
  public static final long versionID = 201208081755L;

  void log(String containerId, String msg) throws IOException;

  /**
   * Initialization parameters for StramChild container. Container
   * wide settings remain effective as long as the process is running. Operators can
   * be deployed and removed dynamically.
   * <p>
   * <br>
   *
   */
  public static class StreamingContainerContext extends BaseContext implements ContainerContext {
    private static final long serialVersionUID = 201209071402L;
    /**
     * Operators should start processing the initial window at this time.
     */
    public long startWindowMillis;

    public boolean deployBufferServer = true;

    /**
     * Constructor to enable deserialization using Hadoop's Writable interface.
     */
    private StreamingContainerContext()
    {
      super(null, null);
    }

    public StreamingContainerContext(AttributeMap map)
    {
      super(map, null);
    }

    @Override
    public String toString() {
      return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
              .append("applicationAttributes", getAttributes()).toString();
    }

  }

  /**
   *
   * The child obtains its configuration context after container launch.
   * <p>
   * <br>
   * Context will provide all information to initialize or reconfigure the
   * node(s)<br>
   *
   * @param containerId
   * @throws IOException
   * <br>
   */
  StreamingContainerContext getInitContext(String containerId) throws IOException;

  /**
   *
   * Stats of the node that is sent to the hadoop container
   * <p>
   * <br>
   * Hadoop container wraps this together with stats from other operators and sends
   * it to stram <br>
   */
  public static class StreamingNodeHeartbeat extends AbstractWritableAdapter {
    private static final long serialVersionUID = 201208171625L;
    public ArrayList<OperatorStats> windowStats = new ArrayList<OperatorStats>();

    /**
     * The operator stats for the windows processed during the heartbeat interval.
     * @return ArrayList<OperatorStats>
     */
    public ArrayList<OperatorStats> getWindowStats() {
      return windowStats;
    }

    /**
     * The operator stats for the windows processed during the heartbeat interval.
     * @param stats
     */
    public void setWindowStats(ArrayList<OperatorStats> stats) {
      this.windowStats = stats;
    }

    public static enum DNodeState {
      NEW, // node instantiated but not processing yet
      ACTIVE,
      IDLE,// the node stopped processing (no more input etc.)
      FAILED // problemo!
    }

    /**
     * The originating node. There can be multiple operators in a container.
     */
    public int nodeId;

    public int getNodeId() {
      return nodeId;
    }

    public void setNodeId(int nodeId) {
      this.nodeId = nodeId;
    }

    /**
     * Time when the heartbeat was generated by the node.
     */
    public long generatedTms;

    public long getGeneratedTms() {
      return generatedTms;
    }

    public void setGeneratedTms(long generatedTms) {
      this.generatedTms = generatedTms;
    }

    /**
     * Number of milliseconds elapsed since last heartbeat. Other statistics
     * relative to this interval.
     */
    public long intervalMs;

    public long getIntervalMs() {
      return intervalMs;
    }

    public void setIntervalMs(long intervalMs) {
      this.intervalMs = intervalMs;
    }

    /**
     * State of the operator (processing, idle etc).
     */
    public String state;

    public String getState() {
      return state;
    }

    public void setState(String state) {
      this.state = state;
    }

    public final List<String> recordingNames = new ArrayList<String>();

    public List<String> getRecordingNames() {
      return Collections.unmodifiableList(recordingNames);
    }

    public void addRecordingName(String recordingName) {
      this.recordingNames.add(recordingName);
    }

    public final Map<String, Long> bufferServerBytes = new HashMap<String, Long>();

    public Map<String, Long> getBufferServerBytes()
    {
      return Collections.unmodifiableMap(bufferServerBytes);
    }

    public void setBufferServerBytes(String identifier, long bytes)
    {
      this.bufferServerBytes.put(identifier, bytes);
    }

  }

  /**
   *
   * Sends stats aggregated by all operators in the this container to the stram
   * <p>
   * <br>
   *
   */
  public static class ContainerHeartbeat extends AbstractWritableAdapter {
    private static final long serialVersionUID = 1L;
    public String containerId;

    /**
     * Buffer server address for this container.
     * Port numbers are dynamically assigned and the master uses this info to deploy subscribers.
     */
    public String bufferServerHost;
    public int bufferServerPort;

    public String jvmName;
    public int memoryMBFree;
    public boolean restartRequested;

    public String getContainerId() {
      return containerId;
    }

    public void setContainerId(String containerId) {
      this.containerId = containerId;
    }

    /**
     * List with all operators in the container.
     */
    public List<StreamingNodeHeartbeat> dnodeEntries;

    public List<StreamingNodeHeartbeat> getDnodeEntries() {
      return dnodeEntries;
    }

    public void setDnodeEntries(List<StreamingNodeHeartbeat> dnodeEntries) {
      this.dnodeEntries = dnodeEntries;
    }

  }

  /**
   *
   * Request by stram as response to heartbeat for further communication
   * <p>
   * <br>
   * The child container will continue RPC communication depending on the type
   * of request.<br>
   * <br>
   *
   */
  public static class StramToNodeRequest extends AbstractWritableAdapter {
    private static final long serialVersionUID = 1L;

    public int operatorId;
    public NodeRequest.RequestType requestType;
    public long recoveryCheckpoint;
    public String portName;

    public String setPropertyKey;
    public String setPropertyValue;

    public int getOperatorId() {
      return operatorId;
    }

    public void setOperatorId(int id) {
      this.operatorId = id;
    }

    public NodeRequest.RequestType getRequestType() {
      return requestType;
    }

    public void setRequestType(NodeRequest.RequestType requestType) {
      this.requestType = requestType;
    }

    public long getRecoveryCheckpoint() {
      return recoveryCheckpoint;
    }

    public void setRecoveryCheckpoint(long recoveryCheckpoint) {
      this.recoveryCheckpoint = recoveryCheckpoint;
    }

    public String getPortName() {
      return portName;
    }

    public void setPortName(String portName) {
      this.portName = portName;
    }

    @Override
    public String toString() {
      return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
              .append("operatorId", this.operatorId)
              .append("requestType", this.requestType)
              .append("portName", this.portName).toString();
    }
  }

  /**
   *
   * Response from the stram to the container heartbeat
   * <p>
   * <br>
   *
   */
  public static class ContainerHeartbeatResponse extends AbstractWritableAdapter {
    private static final long serialVersionUID = 1L;
    /**
     * Indicate container to exit heartbeat loop and shutdown.
     */
    public boolean shutdown;

    /**
     * Optional list of responses for operators in the container.
     */
    public List<StramToNodeRequest> nodeRequests;

    /**
     * Set when there are pending requests that wait for dependencies to
     * complete.
     */
    public boolean hasPendingRequests = false;

    /**
     * Set when operators need to be removed.
     */
    public List<OperatorDeployInfo> undeployRequest;

    /**
     * Set when new operators need to be deployed.
     */
    public List<OperatorDeployInfo> deployRequest;

    /**
     * Set when dag purges a particular windowId as it's processed by all the operators.
     */
    public long committedWindowId = -1;
  }

  /**
   * To be called periodically by child for heartbeat protocol. Container may
   * return response for node to shutdown etc.
   */
  ContainerHeartbeatResponse processHeartbeat(ContainerHeartbeat msg);

  /**
   * Called to fetch pending request.
   *
   * @param containerId
   * @return {com.datatorrent.stram.ContainerHeartbeatResponse}
   */
  ContainerHeartbeatResponse pollRequest(String containerId);

}
